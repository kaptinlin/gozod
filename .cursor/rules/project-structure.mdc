---
description:
globs:
alwaysApply: false
---
# GoZod Project Structure & File Organization Guide

---

## 1. Design Goals & Philosophy

GoZod follows a *type-safe, layered* architecture that mirrors the API surface of [Zod v4](mdc:https:/github.com/colinhacks/zod) while embracing Go idioms:

1. **Input-Output Symmetry** â€“ every schema returns the same type it accepts after validation/coercion.
2. **Unified Wrapper Pattern** â€“ optional / nilable / default / prefault wrappers share the same internal contract.
3. **Strict Separation of Concerns** â€“ *parsing*, *checking*, *issue creation*, *error formatting* and *i18n* each live in their own packages.
4. **Composable Validation Pipeline** â€“ checks are first-class citizens that can be merged, cloned and reused.
5. **Compatibility First** â€“ public API names and ergonomics track Zod whenever practical.

---

## 2. Layered Architecture

```
go module gozod
â”œâ”€â”€ core      # Foundation contracts (no concrete logic)
â”œâ”€â”€ pkg       # Re-usable, reflection-free helpers (zero deps)
â”œâ”€â”€ internal  # Private runtime engine (generic parser, checks, issues)
â”œâ”€â”€ types     # Public schema implementations (String, Array, â€¦)
â”œâ”€â”€ locales   # Built-in i18n bundles
â””â”€â”€ bin       # CLI utilities / integration hooks
```

### 2.1 One-Way Dependency Rule

```mermaid
graph TD;
  core --> internal;
  core --> pkg;
  pkg  --> internal;
  internal --> types;
  core --> types;
  internal --> locales;
  types --> locales;
```

*`types`* never import each other; all cross-type logic lives in *internal* or *pkg*.

---

## 3. Directory Reference

### 3.1 `core/` â€“ Foundation Layer

| File | Purpose |
|------|---------|
| `interfaces.go` | Public interfaces (`ZodType`, `Cloneable`, `Coercible` â€¦) |
| `types.go`      | Internal state containers (`ZodTypeInternals`, `SchemaParams`) |
| `checks.go`     | Generic check contracts & helpers |
| `context.go`    | Parse context, payload & path helpers |
| `issues.go`     | User-facing error types (`ZodIssue`, `ZodError`) |
| `constants.go`  | Library-wide constants (issue codes, type ids) |
| `config.go`     | Global config & default error map |
| `aliases.go`    | Convenience type aliases (`Schema`, `ObjectSchema`) |

> **Golden rule:** *core contains zero business logic; it only defines contracts and small helpers required by every other layer.*

### 3.2 `pkg/` â€“ Utilities Layer

Stateless, allocation-conscious helpers independent of GoZod runtime:

| Sub-package | Highlights |
|-------------|------------|
| `validate`  | Atomic, reflection-free validators (length, numeric, regex, ISO 8601 â€¦) |
| `coerce`    | Loss-less type coercion helpers (`ToInt64`, `ToBool` â€¦) |
| `reflectx`  | Safe reflection helpers, type guards, deref utils |
| `mapx`      | Generic map manipulation (string & generic keys) |
| `slicex`    | Generic slice helpers (merge, unique, map) |
| `structx`   | Struct â‡„ map conversion without `encoding/json` |
| `jsonx`     | Lightweight JSON format validators |
| `regexes`   | Pre-compiled, namespaced regex library |

### 3.3 `internal/` â€“ Runtime Engine (ðŸ¤« private)

| Sub-dir | Role |
|---------|------|
| `engine`   | Generic parser, coercion and check runner |
| `checks`   | Concrete check factories (length, numeric, format â€¦) |
| `issues`   | Raw issue builders, finalisers & formatters |
| `utils`    | Low-level helpers used only by the engine |
| `validate` | Complex validators that rely on schema recursion |

### 3.4 `types/` â€“ Schema Implementations

Each file maps 1-to-1 with a Zod API call and follows the **three-layer template**:

```
// Definition Layer
type ZodString struct { internals core.ZodTypeInternals }

// Internals Layer (auto-generated by factory helpers)

// Public API Layer
func (z *ZodString) Parse(...) { return engine.ParseType[string](mdc:...) }
```

Wrapper types (*Default*, *Prefault*, *Optional*, *Nilable*) embed or proxy the underlying schema and live in their own files.

### 3.5 `locales/`

Tiny, zero-dep bundles of translated error messages. New languages implement the `Locale` interface and register themselves in `locales.go`.

---

## 4. File Responsibility Matrix

| Responsibility | Owns Implementation | Never Does |
|----------------|--------------------|------------|
| Interface definitions | `core/` | concrete parsing logic |
| Atomic validators     | `pkg/validate` | emit `ZodIssue` |
| Schema checks         | `internal/checks` | import `types/` |
| Parsing engine        | `internal/engine` | hard-code type knowledge |
| Public APIs (`String()`, `Int()`, â€¦) | `types/` | reach into other schema internals |
| Error formatting      | `internal/issues` | mutate external state |

---

## 5. Naming Conventions

* **Schema files**: `string.go`, `integer.go`, `object.go`, `union.go`â€¦
* **Wrapper files**: `default.go`, `optional.go`, `prefault.go`, `nilable.go`
* **Check factories**: live inside `internal/checks/`; file name matches concern (`numeric.go`, `strings.go`)
* **Packages** never use underscores; files do where clarity wins (`coercion.go`, `parser_test.go`).

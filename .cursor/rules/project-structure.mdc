---
description:
globs:
alwaysApply: false
---
# GoZod Project Structure & File Organization Guide

---

## 1. Design Goals & Philosophy

GoZod follows a *type-safe, layered* architecture that mirrors the API surface of [Zod v4](mdc:https:/github.com/colinhacks/zod) while embracing Go idioms:

1. **Input-Output Symmetry** â€“ every schema returns the same type it accepts after validation/coercion.
2. **Unified Wrapper Pattern** â€“ optional / nilable / default / prefault wrappers share the same internal contract.
3. **Strict Separation of Concerns** â€“ *parsing*, *checking*, *issue creation*, *error formatting* and *i18n* each live in their own packages.
4. **Composable Validation Pipeline** â€“ checks are first-class citizens that can be merged, cloned and reused.
5. **Compatibility First** â€“ public API names and ergonomics track Zod whenever practical.

---

## 2. Layered Architecture

```
go module gozod
â”œâ”€â”€ bin/         # Build outputs and tools
â”œâ”€â”€ coerce/      # Root-level coercion utilities
â”œâ”€â”€ core/        # Foundation contracts (no concrete logic)
â”œâ”€â”€ docs/        # Documentation and guides
â”œâ”€â”€ examples/    # Example implementations and usage
â”œâ”€â”€ internal/    # Private runtime engine (generic parser, checks, issues)
â”œâ”€â”€ locales/     # Built-in i18n bundles
â”œâ”€â”€ pkg/         # Re-usable, reflection-free helpers (zero deps)
â”œâ”€â”€ types/       # Public schema implementations (String, Array, â€¦)
â””â”€â”€ validators/  # Custom validator system (registry, interfaces, converters)
```

### 2.1 One-Way Dependency Rule

```mermaid
graph TD;
  core --> internal;
  core --> pkg;
  pkg  --> internal;
  internal --> types;
  core --> types;
  internal --> locales;
  types --> locales;
  coerce --> types;
  coerce --> internal;
  validators --> core;
  validators --> internal;
```

*`types`* never import each other; all cross-type logic lives in *internal*, *pkg*, or *coerce*.

---

## 3. Directory Reference

### 3.1 Root Level Files

| File | Purpose |
|------|---------|
| `gozod.go` | Main entry point with all public constructors and exports |
| `gozod_test.go` | Integration tests for the main API |
| `json_schema.go` | JSON Schema generation functionality |
| `json_schema_test.go` | Tests for JSON Schema generation |
| `CLAUDE.md` | Project instructions for Claude Code AI assistant |
| `Makefile` | Build automation and common tasks |

### 3.2 `bin/` â€“ Build Outputs
Generated binaries, tools, and build artifacts. Not checked into version control.

### 3.3 `coerce/` â€“ Root-Level Coercion
High-level coercion utilities that bridge between `pkg/coerce` and the schema system:

| File | Purpose |
|------|---------|
| `coerce.go` | Type coercion integration with schema validation |
| `coerce_test.go` | Tests for coercion functionality |

### 3.4 `core/` â€“ Foundation Layer

| File | Purpose |
|------|---------|
| `interfaces.go` | Public interfaces (`ZodType`, `Cloneable`, `Coercible` â€¦) |
| `definition.go` | Schema definition primitives (`ZodTypeDef`, `SchemaParams`, shape aliases) |
| `parsing.go`    | Parsing & refinement contexts, parse-time utilities |
| `transform.go`  | Transformation & pipeline primitives (`ZodTransform`, `ZodPipe`) |
| `checks.go`     | Generic check contracts & helpers |
| `context.go`    | Parse context, payload & path helpers |
| `issues.go`     | User-facing error types (`ZodIssue`, `ZodError`) |
| `constants.go`  | Library-wide constants (issue codes, type ids) |
| `config.go`     | Global config & default error map |
| `registry.go`   | Schema metadata and registration system |

> **Golden rule:** *core contains zero business logic; it only defines contracts and small helpers required by every other layer.*

### 3.5 `docs/` â€“ Documentation

| File | Purpose |
|------|---------|
| `api.md` | Complete API documentation with all methods and examples |
| `basics.md` | Basic usage and getting started guide |
| `tags.md` | Comprehensive struct tag syntax and custom validator integration |
| `feature-mapping.md` | Complete TypeScript Zod v4 to GoZod mapping reference |
| `error-customization.md` | Guide for customizing error messages |
| `error-formatting.md` | Error formatting and localization |
| `json-schema.md` | JSON Schema generation documentation |
| `metadata.md` | Schema metadata system documentation |

### 3.6 `examples/` â€“ Example Implementations

Comprehensive examples showcasing different GoZod features:

| Directory | Focus |
|-----------|-------|
| `code_generation/` | Code generation for performance |
| `custom_validators/` | Custom validator implementation and usage |
| `circular_references/` | Handling circular references automatically |
| `advanced_lazy/` | Lazy evaluation and recursive structures |
| `struct_tags/` | Struct tag validation examples |
| `union/` | Union type validation |
| `intersection/` | Intersection types |
| `error_handling/` | Error handling patterns |
| `coerce/` | Type coercion examples |

### 3.7 `pkg/` â€“ Utilities Layer

Stateless, allocation-conscious helpers independent of GoZod runtime:

| Sub-package | Highlights |
|-------------|------------|
| `validate`  | Atomic, reflection-free validators (length, numeric, regex, ISO 8601 â€¦) |
| `coerce`    | Loss-less type coercion helpers (`ToInt64`, `ToBool` â€¦) |
| `reflectx`  | Safe reflection helpers, type guards, deref utils |
| `mapx`      | Generic map manipulation (string & generic keys) |
| `slicex`    | Generic slice helpers (merge, unique, map) |
| `structx`   | Struct â‡„ map conversion without `encoding/json` |
| `regexes`   | Pre-compiled, namespaced regex library |
| `tagparser` | Struct tag parsing and schema generation |

### 3.8 `internal/` â€“ Runtime Engine (ðŸ¤« private)

| Sub-dir | Role | Key Files |
|---------|------|-----------|
| `engine`   | Generic parser, coercion and check runner | `parser.go`, `checker.go`, `types.go`, `errors.go`, `params.go` |
| `checks`   | Concrete check factories (length, numeric, format â€¦) | `checks.go`, `custom.go`, `format.go`, `length.go`, `numeric.go`, `strings.go`, `file.go` |
| `issues`   | Raw issue builders, finalisers & formatters | `creators.go`, `formatters.go`, `finalize.go`, `errors.go`, `types.go`, `raw.go`, `accessors.go` |
| `utils`    | Low-level helpers used only by the engine | `utils.go` |

### 3.9 `types/` â€“ Schema Implementations

Each file maps 1-to-1 with a Zod API call and follows the **three-layer template**:

```
// Definition Layer
type ZodString struct { internals core.ZodTypeInternals }

// Internals Layer (auto-generated by factory helpers)

// Public API Layer
func (z *ZodString) Parse(...) { return engine.ParseType[string](mdc:...) }
```

Current schema implementations include:

| Schema Type | Files | Purpose |
|-------------|-------|---------|
| **Primitives** | `string.go`, `bool.go`, `integer.go`, `float.go`, `bigint.go`, `complex.go` | Basic Go types |
| **Special Types** | `any.go`, `unknown.go`, `never.go`, `nil.go` | Special validation types |
| **Collections** | `array.go`, `slice.go`, `map.go`, `record.go` | Container types |
| **Objects** | `object.go`, `struct.go` | Structured data types |
| **Composition** | `union.go`, `discriminated_union.go`, `intersection.go` | Type composition |
| **Functions** | `function.go` | Function validation |
| **Formats** | `email.go`, `network.go`, `ids.go`, `iso.go`, `time.go`, `file.go` | Format-specific validation |
| **Text** | `text.go`, `stringbool.go` | Text processing types |
| **Advanced** | `lazy.go`, `literal.go`, `enum.go`, `transform.go` | Advanced type features |

All schema files include comprehensive test counterparts (`*_test.go`).

### 3.10 `locales/` â€“ Internationalization

Tiny, zero-dep bundles of translated error messages:

| File | Purpose |
|------|---------|
| `locales.go` | Locale interface and registration system |
| `locales_test.go` | Locale system tests |
| `en.go` | English error messages (default) |
| `zh_cn.go` | Simplified Chinese error messages |

New languages implement the `Locale` interface and register themselves in `locales.go`.

### 3.11 `validators/` â€“ Custom Validator System

Thread-safe registry-based custom validator system for user-defined validation:

| File | Purpose |
|------|---------|
| `types.go` | Validator interfaces (`ZodValidator`, `ZodParameterizedValidator`, `ZodDetailedValidator`) |
| `registry.go` | Thread-safe validator registry with type-safe registration and retrieval |
| `converters.go` | Functions to convert validators to GoZod check functions |
| `init.go` | Empty placeholder for user-defined validator registration |

#### Key Features

- **Type-Safe Registry**: Generic methods maintain type safety during registration and retrieval
- **Multiple Validator Types**: Basic, parameterized, and detailed validators for different complexity levels
- **Seamless Integration**: Works with both struct tags (`gozod:"custom_validator"`) and programmatic APIs
- **Thread-Safe Operations**: Concurrent validator registration and usage supported
- **Converter Functions**: Transform validators into GoZod-compatible check functions

#### Usage Pattern

```go
// 1. Users implement validators in their application code
type UniqueUsernameValidator struct{}
func (v *UniqueUsernameValidator) Name() string { return "unique_username" }
func (v *UniqueUsernameValidator) Validate(value string) bool { /* logic */ }
func (v *UniqueUsernameValidator) ErrorMessage(ctx *core.ParseContext) string { /* message */ }

// 2. Register validators using the registry
validators.Register(&UniqueUsernameValidator{})

// 3. Use in struct tags or programmatically
type User struct {
    Username string `gozod:"required,unique_username"`
}
schema := gozod.String().Check("unique_username", validators.ToCheckFn(validator))
```

---

## 4. File Responsibility Matrix

| Responsibility | Owns Implementation | Never Does |
|----------------|--------------------|------------|
| Interface definitions | `core/` | concrete parsing logic |
| Atomic validators     | `pkg/validate` | emit `ZodIssue` |
| Schema checks         | `internal/checks` | import `types/` |
| Parsing engine        | `internal/engine` | hard-code type knowledge |
| Public APIs (`String()`, `Int()`, â€¦) | `types/` | reach into other schema internals |
| Error formatting      | `internal/issues` | mutate external state |

---

## 5. File Organization Patterns

### 5.1 Schema Files (`types/`)
- One schema type per file: `string.go`, `integer.go`, `object.go`, `union.go`
- Comprehensive test files: `string_test.go`, `integer_test.go`, etc.
- All files follow the 8-section template from the implementation guide

### 5.2 Internal Organization
- **Check factories**: Live inside `internal/checks/`; file name matches concern (`numeric.go`, `strings.go`)
- **Engine components**: Grouped by function (`parser.go`, `checker.go`, `types.go`)
- **Issue handling**: Separated by responsibility (`creators.go`, `formatters.go`, `errors.go`)

### 5.3 Package and File Naming
- **Packages** never use underscores; prefer descriptive names
- **Files** use underscores where clarity wins (`coerce_test.go`, `parser_test.go`)
- **Test files** always end with `_test.go` and mirror the source file name

## 6. Development Workflow Integration

### 6.1 Build System (`Makefile`)
```make
test:     # Run all tests with race detection
lint:     # Run golangci-lint and mod tidy checks
build:    # Build all packages
clean:    # Clean build artifacts
```

### 6.2 Documentation Strategy
- **Code examples** live in `examples/` with working `main.go` files
- **API documentation** in `docs/` with comprehensive guides
- **Implementation guides** in `.cursor/rules/` for AI assistance
- **Project instructions** in `CLAUDE.md` for Claude Code integration

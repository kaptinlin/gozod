# GoZod Transform and Refine Mechanism Implementation Guide

## 📋 Overview

This document provides detailed implementation of GoZod Transform (data transformation) and Refine (data validation) mechanisms, including architectural design, file organization, implementation steps, and best practices. The mechanism is based on TypeScript Zod v4 design principles but fully adapted to Go's type system and conventions.

## 🎯 Core Design Principles

### 1. Separation of Concerns Principle
- **Refine**: Only validates data, never modifies data
- **Transform**: Can modify data type and content
- **Check**: Advanced validation, supports complex validation logic

### 2. Type Safety First
- Provides compile-time type-safe Transform and Refine methods
- `String().Transform(func(s string) any)` provides type safety
- `String().Refine(func(s string) bool)` provides type safety

### 3. Execution Order Mechanism
- Follows TypeScript Zod v4 execution order: validation → transformation
- Skips transformation when validation fails (early abort)
- Supports error accumulation and propagation

## 🏗️ Architecture Components

### 1. Transform Core Structure (`transform.go`)

**Responsibility**: Provides data transformation functionality

```go
// ZodTransform implements type transformation (corresponds to TypeScript $ZodTransform)
// Important: Based on source code analysis, ZodTransform itself doesn't contain 'in', only transformation function
type ZodTransform[Out, In any] struct {
    internals *ZodTransformInternals[Out, In]
}

// Parse executes transformation and validation
func (z *ZodTransform[Out, In]) Parse(input any, ctx ...*ParseContext) (any, error) {
    var parseCtx *ParseContext
    if len(ctx) > 0 {
        parseCtx = ctx[0]
    }

    if parseCtx == nil {
        parseCtx = NewParseContext()
    }

    // Create parse payload
    payload := &ParsePayload{
        Value:  input,
        Issues: make([]ZodRawIssue, 0),
        Path:   []any{},
    }

    // Create enhanced context supporting error reporting
    refinementCtx := &RefinementContext{
        ParseContext: parseCtx,
        Value:        input,
        AddIssue: func(issue ZodIssue) {
            rawIssue := ZodRawIssue{
                Code:    issue.Code,
                Message: issue.Message,
                Path:    payload.Path,
            }
            payload.Issues = append(payload.Issues, rawIssue)
        },
    }

    // 🔥 Transform core principle: can modify data (key difference from Refine)
    transformed, err := z.internals.Def.TransformFn(input, refinementCtx)
    if err != nil {
        // Transformation failed: add error, don't modify data
        issue := CreateCustomIssue(input, err.Error())
        payload.Issues = append(payload.Issues, issue)
    } else {
        // 🔥 Transformation succeeded: directly modify payload.Value (key difference from Refine)
        payload.Value = transformed
    }

    // Check for errors reported through AddIssue
    if len(payload.Issues) > 0 {
        finalIssues := make([]ZodIssue, len(payload.Issues))
        for i, rawIssue := range payload.Issues {
            finalIssues[i] = FinalizeIssue(rawIssue, parseCtx, GetConfig())
        }
        return nil, NewZodError(finalIssues)
    }

    return payload.Value, nil
}
```

### 2. Refine Implementation Mechanism (`type_string.go`)

**Responsibility**: Provides data validation functionality

```go
// Refine adds type-safe custom validation logic to the string schema
// Based on hybrid approach design from refine-implementation-mechanism.md
// 🔥 Core principle: returns original value on validation success, returns error on failure, never modifies input
func (z *ZodString) Refine(fn func(string) bool, params ...SchemaParams) *ZodString {
    // Use existing RefineAny infrastructure, handle directly inline
    result := z.RefineAny(func(v any) bool {
        str, isNil, err := extractStringValue(v)

        if err != nil {
            return false
        }

        if isNil {
            // nil *string handling: return true to let upper logic (Nilable flag) decide whether to allow
            return true
        }

        return fn(str)
    }, params...)
    // Return concrete ZodString type to support method chaining
    return result.(*ZodString)
}

// RefineAny adds flexible custom validation logic to the string schema
func (z *ZodString) RefineAny(fn func(any) bool, params ...SchemaParams) ZodType[any, any] {
    // Use NewCustom from checks.go to create refine check, following unified pattern
    check := NewCustom[any](fn, params...)
    return AddCheck(z, check)
}
```

### 3. Type-Safe Helper Functions (`type_string.go`)

**Responsibility**: Provides type-safe helper functions

```go
// extractStringValue smart string value extraction helper method
// Returns: (string value, whether nil pointer, error)
func extractStringValue(input any) (string, bool, error) {
    switch v := input.(type) {
    case string:
        return v, false, nil
    case *string:
        if v == nil {
            return "", true, nil
        }
        return *v, false, nil
    default:
        return "", false, fmt.Errorf("Expected string or *string, got %T", input)
    }
}
```

### 4. Type-Safe Transform Implementation (`type_string.go`)

**Responsibility**: Provides type-safe Transform methods

```go
// Transform provides type-safe string transformation, supports smart dereferencing
// Automatically handles string, *string and nil *string inputs
func (z *ZodString) Transform(fn func(string, *RefinementContext) (any, error)) ZodType[any, any] {
    return z.TransformAny(func(input any, ctx *core.RefinementContext) (any, error) {
        str, isNil, err := extractStringValue(input)

        if err != nil {
            return nil, err
        }

        if isNil {
            return nil, fmt.Errorf("Cannot transform nil *string")
        }

        return fn(str, ctx)
    })
}

// TransformAny flexible version of transformation
func (z *ZodString) TransformAny(fn func(any, *RefinementContext) (any, error)) ZodType[any, any] {
    // Create pure Transform (doesn't contain 'in', corresponds to TypeScript's transform(tx))
    transform := NewZodTransform[any, any](fn)

    // Key: return pipe(inst, transform), corresponds to TypeScript's pipe(inst, transform(tx as any))
    return &ZodPipe[any, any]{
        in:  any(z).(ZodType[any, any]),         // Type conversion
        out: any(transform).(ZodType[any, any]), // Type conversion
        def: ZodTypeDef{Type: "pipe"},
    }
}
```

## 🔧 Implementation Steps

### Step 1: Implement Type-Safe Refine Methods

```go
// Refine type-safe version - only accepts string type
func (z *ZodString) Refine(fn func(string) bool, params ...SchemaParams) *ZodString {
    // Use existing RefineAny infrastructure, handle directly inline
    result := z.RefineAny(func(v any) bool {
        str, isNil, err := extractStringValue(v)

        if err != nil {
            return false
        }

        if isNil {
            // nil *string handling: return true to let upper logic (Nilable flag) decide whether to allow
            return true
        }

        return fn(str)
    }, params...)
    return result.(*ZodString)
}
```

### Step 2: Implement Transform Infrastructure

```go
// ZodTransformDef defines transformation configuration
type ZodTransformDef[Out, In any] struct {
    ZodTypeDef
    Type        string // "transform"
    TransformFn func(In, *RefinementContext) (Out, error)
}

// ZodTransformInternals contains transformation internal state
type ZodTransformInternals[Out, In any] struct {
    ZodTypeInternals
    Def *ZodTransformDef[Out, In]
}
```

### Step 3: Implement Pipeline Connection

```go
// ZodPipe connects input schema to output schema
type ZodPipe[In, Out any] struct {
    in  ZodType[any, In]
    out ZodType[Out, any]
    def ZodTypeDef
}

// Parse executes pipeline: in → out
func (z *ZodPipe[In, Out]) Parse(input any, ctx ...*ParseContext) (any, error) {
    // First validate with input schema
    intermediate, err := z.in.Parse(input, ctx...)
    if err != nil {
        return nil, err
    }

    // Then transform with output schema
    return z.out.Parse(intermediate, ctx...)
}
```

### Step 4: Add Error Handling and Context

```go
// RefinementContext provides enhanced context for transformations
type RefinementContext struct {
    *ParseContext
    Value    any
    AddIssue func(ZodIssue)
}

// CreateCustomIssue creates a custom validation issue
func CreateCustomIssue(input any, message string) ZodRawIssue {
    return ZodRawIssue{
        Code:    string(CustomIssue),
        Message: message,
        Input:   input,
    }
}
```

## 🧪 Testing Strategy

### 1. Basic Refine Tests

```go
func TestZodString_Refine(t *testing.T) {
    schema := gozod.String().Refine(func(s string) bool {
        return len(s) >= 5
    })
    
    t.Run("valid string passes", func(t *testing.T) {
        result, err := schema.Parse("hello")
        assert.NoError(t, err)
        assert.Equal(t, "hello", result)
    })
    
    t.Run("invalid string fails", func(t *testing.T) {
        _, err := schema.Parse("hi")
        assert.Error(t, err)
    })
}
```

### 2. Transform Tests

```go
func TestZodString_Transform(t *testing.T) {
    schema := gozod.String().Transform(func(s string, ctx *gozod.RefinementContext) (any, error) {
        return strings.ToUpper(s), nil
    })
    
    t.Run("transforms string to uppercase", func(t *testing.T) {
        result, err := schema.Parse("hello")
        assert.NoError(t, err)
        assert.Equal(t, "HELLO", result)
    })
    
    t.Run("transform error handling", func(t *testing.T) {
        errorSchema := gozod.String().Transform(func(s string, ctx *gozod.RefinementContext) (any, error) {
            if s == "error" {
                return nil, fmt.Errorf("transformation failed")
            }
            return s, nil
        })
        
        _, err := errorSchema.Parse("error")
        assert.Error(t, err)
    })
}
```

### 3. Pipeline Tests

```go
func TestTransformPipeline(t *testing.T) {
    // String → Number → Boolean pipeline
    schema := gozod.String().
        Transform(func(s string, ctx *gozod.RefinementContext) (any, error) {
            return strconv.Atoi(s)
        }).
        Transform(func(n any, ctx *gozod.RefinementContext) (any, error) {
            if num, ok := n.(int); ok {
                return num > 0, nil
            }
            return false, nil
        })
    
    t.Run("pipeline execution", func(t *testing.T) {
        result, err := schema.Parse("5")
        assert.NoError(t, err)
        assert.Equal(t, true, result)
        
        result, err = schema.Parse("-1")
        assert.NoError(t, err)
        assert.Equal(t, false, result)
    })
}
```

## 📖 Usage Examples

### Basic Refine Usage

```go
// Simple validation
emailSchema := gozod.String().Refine(func(s string) bool {
    return strings.Contains(s, "@")
}, gozod.SchemaParams{Error: "Invalid email format"})

result, err := emailSchema.Parse("user@example.com") // OK
result, err := emailSchema.Parse("invalid-email")    // Error
```

### Transform Usage

```go
// String to number transformation
numberSchema := gozod.String().Transform(func(s string, ctx *gozod.RefinementContext) (any, error) {
    return strconv.Atoi(s)
})

result, err := numberSchema.Parse("123") // Returns 123 (int)
```

### Complex Pipeline

```go
// Validation → Transformation → Validation chain
schema := gozod.String().
    Min(1).                                    // Validation: not empty
    Transform(func(s string, ctx *gozod.RefinementContext) (any, error) {
        return strings.TrimSpace(s), nil       // Transform: trim whitespace
    }).
    Refine(func(s any) bool {                  // Validation: still not empty after trim
        if str, ok := s.(string); ok {
            return len(str) > 0
        }
        return false
    })

result, err := schema.Parse("  hello  ") // Returns "hello"
result, err := schema.Parse("   ")       // Error: empty after trim
```

This implementation guide provides the complete foundation for implementing Transform and Refine mechanisms in GoZod while maintaining full TypeScript compatibility and Go type safety. 

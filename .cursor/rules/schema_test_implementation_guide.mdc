# GoZod Schema Type Testing Implementation Guide

## üìã Overview

This document provides comprehensive implementation standards for GoZod Schema type test files, including test architecture design, file organization, implementation steps, and best practices. This guide is based on the successful practices of `type_string_test.go` and provides unified testing implementation standards for all Schema types.

## üéØ Core Design Principles

### 1. Structured Organization First
- **Clear section division**: Use unified section titles and numbering
- **Logical grouping**: Organize tests by functionality rather than implementation details
- **Consistent naming convention**: Follow `Test{Type}{Feature}` pattern
- **Minimize redundancy**: Remove duplicate test cases and excessive documentation

### 2. Code Simplicity
- **Table-driven tests**: Use table-driven patterns for similar test cases
- **Avoid over-commenting**: Only keep necessary explanatory comments
- **English comments**: Use English for all comments to maintain internationalization
- **Streamlined test cases**: Focus on core functionality and edge cases

### 3. Deep Validation Strategy
- **Compile-time type checking**: Verify correctness of method signatures
- **Smart type inference testing**: Ensure input-output type consistency and pointer identity preservation
- **Side-effect isolation verification**: Ensure modifiers don't accidentally affect original objects
- **Behavior boundary comparison**: Clearly distinguish behavior differences between methods (e.g., Refine vs Transform)
- **Advanced feature composition**: Test method combination and compatibility in complex scenarios

### 4. Comprehensive Coverage Strategy
- **Basic functionality coverage**: Verify core parsing and validation logic
- **Edge case testing**: Include boundary cases like nil, empty values, extreme values
- **Error handling verification**: Ensure correctness of error types and messages
- **TypeScript compatibility**: Verify behavior consistency with Zod v4

## üèóÔ∏è Test File Architecture

### 1. Standard File Structure

Each Schema type test file follows a unified ten-section architecture:

```go
package gozod

import (
    "regexp"
    "strings"
    "testing"

    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
)

// =============================================================================
// 1. Basic functionality and type inference
// =============================================================================

// =============================================================================
// 2. Coerce (type coercion)
// =============================================================================

// =============================================================================
// 3. Validation methods
// =============================================================================

// =============================================================================
// 4. Modifiers and wrappers
// =============================================================================

// =============================================================================
// 5. Chaining and method composition
// =============================================================================

// =============================================================================
// 6. Transform/Pipe
// =============================================================================

// =============================================================================
// 7. Refine
// =============================================================================

// =============================================================================
// 8. Error handling
// =============================================================================

// =============================================================================
// 9. Edge and mutual exclusion cases
// =============================================================================

// =============================================================================
// 10. Default and Prefault tests
// =============================================================================
```

### 2. Section Responsibility Definition

| Section | Responsibility | Test Content |
|---------|----------------|--------------|
| **1. Basic functionality** | Core functionality and type inference | Basic validation, smart type inference, Nilable modifier |
| **2. Coerce** | Type coercion | Basic coercion, coercion + validation combination |
| **3. Validation methods** | Validation methods | Type-specific validation methods (length, range, format, etc.) |
| **4. Modifiers and wrappers** | Modifiers and wrappers | Optional, Nilable, Nullish, MustParse |
| **5. Chaining** | Chaining and method composition | Multiple validations, validation + format combinations |
| **6. Transform/Pipe** | Data transformation and pipelines | Basic transformation, transformation chains, pipeline combinations |
| **7. Refine** | Custom validation | Basic Refine, custom error messages |
| **8. Error handling** | Error handling | Error structure, custom errors, multiple errors |
| **9. Edge cases** | Edge and mutual exclusion cases | Empty values, extreme values, type mismatches, modifier combinations |
| **10. Default/Prefault** | Default and fallback values | Default values, fallback values, chaining combinations |

## üîß Core Testing Patterns

### 1. Basic Functionality Testing Pattern

```go
func TestStringBasicFunctionality(t *testing.T) {
    t.Run("basic validation", func(t *testing.T) {
        schema := String()
        // Valid input
        result, err := schema.Parse("hello")
        require.NoError(t, err)
        assert.Equal(t, "hello", result)
        // Invalid type
        _, err = schema.Parse(123)
        assert.Error(t, err)
    })

    t.Run("smart type inference", func(t *testing.T) {
        schema := String()
        // String input returns string
        result1, err := schema.Parse("hello")
        require.NoError(t, err)
        assert.IsType(t, "", result1)
        assert.Equal(t, "hello", result1)
        // Pointer input returns same pointer
        str := "world"
        result2, err := schema.Parse(&str)
        require.NoError(t, err)
        assert.IsType(t, (*string)(nil), result2)
        assert.Equal(t, &str, result2)
    })

    t.Run("nilable modifier", func(t *testing.T) {
        schema := String().Nilable()
        // nil input should succeed, return nil pointer
        result, err := schema.Parse(nil)
        require.NoError(t, err)
        assert.Nil(t, result)
        assert.IsType(t, (*string)(nil), result)
        // Valid input keeps type inference
        result2, err := schema.Parse("hello")
        require.NoError(t, err)
        assert.Equal(t, "hello", result2)
        assert.IsType(t, "", result2)
    })
}
```

### 2. Deep Validation Testing Pattern

#### 2.1 Pointer Identity Verification Pattern

```go
t.Run("pointer identity preservation", func(t *testing.T) {
    schema := String().Min(2)
    input := "hello"
    inputPtr := &input
    
    result, err := schema.Parse(inputPtr)
    require.NoError(t, err)
    
    // Verify not only type and value, but exact pointer identity
    resultPtr, ok := result.(*string)
    require.True(t, ok, "Result should be *string")
    assert.True(t, resultPtr == inputPtr, "Should return the exact same pointer")
    assert.Equal(t, "hello", *resultPtr)
})
```

#### 2.2 Side-effect Isolation Verification Pattern

```go
t.Run("nilable does not affect original schema", func(t *testing.T) {
    baseSchema := String().Min(3)
    nilableSchema := baseSchema.Nilable()
    
    // Test nilable schema allows nil
    result1, err1 := nilableSchema.Parse(nil)
    require.NoError(t, err1)
    assert.Nil(t, result1)
    
    // Test nilable schema validates non-nil values
    result2, err2 := nilableSchema.Parse("hello")
    require.NoError(t, err2)
    assert.Equal(t, "hello", result2)
    
    // Test nilable schema rejects invalid values
    _, err3 := nilableSchema.Parse("hi")
    assert.Error(t, err3)
    
    // üî• Critical: Original schema should remain unchanged
    _, err4 := baseSchema.Parse(nil)
    assert.Error(t, err4, "Original schema should still reject nil")
    
    result5, err5 := baseSchema.Parse("hello")
    require.NoError(t, err5)
    assert.Equal(t, "hello", result5)
})
```

#### 2.3 Behavior Boundary Comparison Pattern

```go
t.Run("refine vs transform distinction", func(t *testing.T) {
    input := "hello"
    
    // Refine: only validates, never modifies
    refineSchema := String().Refine(func(s string) bool {
        return len(s) > 0
    })
    refineResult, refineErr := refineSchema.Parse(input)
    
    // Transform: validates and converts
    transformSchema := String().Transform(func(s string, ctx *core.RefinementContext) (any, error) {
        return strings.ToUpper(s), nil
    })
    transformResult, transformErr := transformSchema.Parse(input)
    
    // Refine returns original value unchanged
    require.NoError(t, refineErr)
    assert.Equal(t, "hello", refineResult)
    
    // Transform returns modified value
    require.NoError(t, transformErr)
    assert.Equal(t, "HELLO", transformResult)
    
    // Key distinction: Refine preserves, Transform modifies
    assert.Equal(t, input, refineResult, "Refine should return exact original value")
    assert.NotEqual(t, input, transformResult, "Transform should return modified value")
})
```

## üéØ Type-specific Implementation Points

### 1. Transform Method Signature Fix

**Issue**: Transform method type signature must match concrete type

```go
// ‚ùå Wrong - Type mismatch
String().Transform(func(val any, ctx *core.RefinementContext) (any, error) {
    if str, ok := val.(string); ok {
        return strings.ToUpper(str), nil
    }
    return val, nil
})

// ‚úÖ Correct - Matches ZodString.Transform signature
String().Transform(func(val string, ctx *core.RefinementContext) (any, error) {
    return strings.ToUpper(val), nil
})
```

### 2. Transform Chaining Handling

**Issue**: Transform returns `ZodType[any, any]`, cannot continue chaining Transform

```go
// ‚ùå Wrong - Transform return type has no Transform method
String().Transform(...).Transform(...)

// ‚úÖ Correct - Use TransformAny for chaining
String().
    Transform(func(val string, ctx *core.RefinementContext) (any, error) {
        return strings.ToUpper(val), nil
    }).
    TransformAny(func(val any, ctx *core.RefinementContext) (any, error) {
        if str, ok := val.(string); ok {
            return "PREFIX_" + str, nil
        }
        return val, nil
    })
```

### 3. Refine Method Signature Fix

**Issue**: Refine method type signature must match concrete type

```go
// ‚ùå Wrong - Type mismatch
String().Refine(func(val any) bool {
    if str, ok := val.(string); ok {
        return strings.ContainsAny(str, "!@#$%^&*()")
    }
    return false
})

// ‚úÖ Correct - Matches ZodString.Refine signature
String().Refine(func(val string) bool {
    return strings.ContainsAny(val, "!@#$%^&*()")
})
```

### 4. Prefault Generic Inference Issue

**Issue**: Package-level Prefault function cannot infer generic types

```go
// ‚ùå Wrong - Generic inference fails
Prefault(String().Min(5), "fallback")

// ‚úÖ Correct - Use method chaining
String().Min(5).Prefault("fallback")
```

## üìä Test Data Flow Design

### 1. Basic Validation Flow

```
Input Data ‚Üí Schema.Parse() ‚Üí Type Check ‚Üí Validation Check ‚Üí Return Result/Error
```

### 2. Smart Type Inference Flow

```
string input ‚Üí Parse() ‚Üí string output
*string input ‚Üí Parse() ‚Üí *string output (same pointer)
nil input + Nilable ‚Üí Parse() ‚Üí (*Type)(nil) output
```

### 3. Error Handling Flow

```
Invalid Input ‚Üí Parse() ‚Üí Validation Failure ‚Üí ZodError ‚Üí Check Error Structure and Message
```

### 4. Chaining Flow

```
Schema ‚Üí Method1() ‚Üí Method2() ‚Üí ... ‚Üí Parse() ‚Üí Validate All Rules ‚Üí Result
```

## üîß Implementation Steps

### Step 1: Create Test File Structure

```bash
# Create new test file
touch type_{type}_test.go
```

### Step 2: Set Up File Header and Imports

```go
package gozod

import (
    "regexp"
    "strings"
    "testing"

    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
)
```

### Step 3: Implement Ten-Section Structure

Implement each test function according to the standard ten-section structure:

1. **Basic functionality and type inference**
2. **Coerce (type coercion)**
3. **Validation methods**
4. **Modifiers and wrappers**
5. **Chaining and method composition**
6. **Transform/Pipe**
7. **Refine**
8. **Error handling**
9. **Edge and mutual exclusion cases**
10. **Default and Prefault tests**

### Step 4: Implement Type-specific Tests

Implement validation method tests according to Schema type characteristics:

- **String Type**: Length, pattern, format validation
- **Number Type**: Range, precision, special value validation
- **Boolean Type**: Basic validation and coercion
- **Array/Slice Type**: Length, element validation
- **Object Type**: Field, nested validation

### Step 5: Fix Type-specific Issues

- Fix Transform method signatures
- Handle Transform chaining
- Fix Refine method signatures
- Resolve Prefault generic inference issues

### Step 6: Verify and Optimize

```bash
# Compile check
go build ./...

# Run tests
go test -v -run Test{Type}

# Coverage check
go test -cover ./...
```

## üîç Quality Assurance Checklist

### Compile-time Checks
- [ ] All test functions compile successfully
- [ ] Import statements are correct and minimal
- [ ] Type signatures match actual implementation
- [ ] No unused variables or imports

### Runtime Checks
- [ ] All test cases pass
- [ ] Error handling tests correctly verify error types
- [ ] Smart type inference tests verify type consistency
- [ ] Edge case tests cover extreme values and special cases

### Deep Validation Checks
- [ ] **Pointer identity verification**: Ensure smart type inference returns same pointer
- [ ] **Side-effect isolation**: Verify modifiers don't accidentally affect original schema
- [ ] **Clear behavior boundaries**: Distinguish behavior differences between methods (e.g., Refine vs Transform)
- [ ] **Complex composition testing**: Verify correctness of advanced feature combinations
- [ ] **Dynamic feature testing**: Test dynamic features like function-based defaults

### Code Quality Checks
- [ ] Test function naming follows convention
- [ ] Section structure is clear and complete
- [ ] Comments are concise and in English
- [ ] Table-driven tests for similar cases
- [ ] **Deep validation comments**: Clear explanatory comments for key validation points

### Coverage Checks
- [ ] Basic functionality 100% coverage
- [ ] All validation methods tested
- [ ] Error paths completely covered
- [ ] Boundary cases sufficiently tested
- [ ] **Advanced scenario coverage**: Comprehensive testing of complex combinations and boundary behaviors

## üéØ Success Metrics

### Code Quality
- **Clear structure**: Standardized ten-section organization
- **Consistent naming**: Unified test function naming convention
- **Minimal comments**: Only keep necessary explanations
- **Efficient testing**: Table-driven tests reduce code duplication

### Test Coverage
- **Basic functionality**: 100% coverage
- **Edge cases**: Sufficient boundary testing
- **Error handling**: Complete error path testing
- **Type safety**: Verify method signature correctness
- **Deep validation**: Advanced validation including pointer identity, side-effect isolation, behavior boundaries, etc.

### TypeScript Compatibility
- **Behavior consistency**: Same validation behavior as Zod v4
- **Error format**: Compatible error types and messages
- **API correspondence**: Complete API feature correspondence
- **Smart inference**: Maintain Go type inference advantages

### Advanced Feature Validation
- **Precision guarantee**: Verify implementation precision rather than just functional correctness
- **Isolation confirmation**: Ensure operations don't produce unexpected side effects
- **Composition compatibility**: Verify correct working of complex feature combinations
- **Dynamic feature support**: Test functional and dynamic generation features

---

This testing implementation guide ensures high quality, maintainability, and complete coverage of GoZod Schema type test files while maintaining full compatibility with TypeScript Zod v4. By following these standards, especially the deep validation strategies, you can create concise yet comprehensive test suites for each Schema type, ensuring library reliability and precision.

# GoZod Schema Test Implementation Guide

A concise and practical guide for building GoZod Schema test files, updated with the latest practices from `bool_test.go`.

---

## üéØ Core Principles

- **Generic Type Safety**: All tests must verify compile-time type safety.
- **Modifier Behavior**: Modifiers must be tested for immutability and correct type transformations (e.g., `bool` to `*bool`).
- **Comprehensive & Organized**: Follow the unified section structure for clarity. Test boundaries and edge cases thoroughly.
- **Real-World Patterns**: Tests should reflect actual API usage, including modifier chaining.

---

## üèóÔ∏è Test File Architecture

Each test file for a schema type should follow this consolidated 7-section architecture:

```go
package types

// ... imports

// =============================================================================
// Basic Functionality
// =============================================================================
func Test<Type>_BasicFunctionality(t *testing.T) { /* ... */ }

// =============================================================================
// Type Safety
// =============================================================================
func Test<Type>_TypeSafety(t *testing.T) { /* ... */ }

// =============================================================================
// Modifier Methods
// =============================================================================
func Test<Type>_Modifiers(t *testing.T) { /* ... */ }

// =============================================================================
// Chaining
// =============================================================================
func Test<Type>_Chaining(t *testing.T) { /* ... */ }

// =============================================================================
// Coercion (Primitives only)
// =============================================================================
func Test<Type>_Coercion(t *testing.T) { /* ... */ }

// =============================================================================
// Edge Cases
// =============================================================================
func Test<Type>_EdgeCases(t *testing.T) { /* ... */ }

// =============================================================================
// Type-Specific Methods (Complex types only)
// =============================================================================
func Test<Type>_TypeSpecificMethods(t *testing.T) { /* ... */ }
```

### Section Responsibilities

| Section | Primary Focus | Key Test Patterns |
|---|---|---|
| **Basic functionality** | Core `Parse`/`MustParse`, valid/invalid inputs, basic errors. | `require.NoError`, `assert.Error`, `assert.Panics` |
| **Type safety** | Generic constraints, return types, type inference. | `assert.IsType`, compile-time `var _ *Zod...` checks. |
| **Modifier methods** | Behavior of all modifiers (`Optional`, `Default`, `Refine`, etc.). | One test function with `t.Run` for each modifier. Test immutability and type evolution. |
| **Chaining** | Complex modifier combinations. | Verify final type and behavior of chained calls. |
| **Coercion** | Type coercion behavior (e.g., string to bool). | For primitive types only. |
| **Edge cases** | `nil` handling, empty context, pointer identity. | Nil handling matrix, pointer preservation checks. |
| **Type-specific methods** | Specialized methods for complex types. | `Enum()`, `Options()`, `Extract()`, `Exclude()` for Enums. |

---

## üîß Core Testing Patterns

### Basic Functionality
Test core parsing, including valid inputs, obviously invalid types, and `MustParse` panic behavior.

```go
func TestBool_BasicFunctionality(t *testing.T) {
    t.Run("valid boolean inputs", func(t *testing.T) {
        schema := Bool()
        result, err := schema.Parse(true)
        require.NoError(t, err)
        assert.True(t, result)
    })

    t.Run("invalid type inputs", func(t *testing.T) {
        schema := Bool()
        _, err := schema.Parse("not a boolean")
        assert.Error(t, err)
    })

    t.Run("MustParse panics on error", func(t *testing.T) {
        schema := Bool()
        assert.Panics(t, func() {
            schema.MustParse("invalid")
        })
    })
}
```

### Modifier Methods
Group all modifier tests under a single function using `t.Run`. This improves organization and reflects the consolidated structure from `bool_test.go`.

```go
func TestBool_Modifiers(t *testing.T) {
    t.Run("Optional makes type nullable and preserves pointer identity", func(t *testing.T) {
        schema := Bool().Optional() // bool -> *bool
        var _ *ZodBool[*bool] = schema // Compile-time check

        // Test nil is accepted
        res, err := schema.Parse(nil)
        require.NoError(t, err)
        assert.Nil(t, res)

        // Test pointer identity preservation
        original := true
        ptr := &original
        res, err = schema.Parse(ptr)
        require.NoError(t, err)
        assert.True(t, res == ptr, "Pointer identity should be preserved")
    })

    t.Run("Default provides a fallback but does not change type", func(t *testing.T) {
        schema := Bool().Default(true)
        var _ *ZodBool[bool] = schema // Type is still bool

        // Default value is not used for valid input
        res, err := schema.Parse(false)
        require.NoError(t, err)
        assert.False(t, res)
    })

    t.Run("Refine adds a custom validation", func(t *testing.T) {
        schema := Bool().Refine(func(b bool) bool {
            return b // only `true` is valid
        })
        
        _, err := schema.Parse(false)
        assert.Error(t, err)
        
        _, err = schema.Parse(true)
        assert.NoError(t, err)
    })

    // ... other modifiers like Overwrite, Check, etc. as t.Run sub-tests
}
```

### Edge Cases
This section is for tricky scenarios: `nil` handling across different modifiers, pointer identity, and API compatibility.

```go
func TestBool_EdgeCases(t *testing.T) {
    t.Run("nil handling matrix", func(t *testing.T) {
        // ... A table-driven test to verify how different schemas
        // (e.g., Bool(), Bool().Optional(), Bool().Nilable()) handle nil input.
    })

    t.Run("pointer identity preservation", func(t *testing.T) {
        // This was previously a separate function. Now it's a focused sub-test.
        schema := Bool().Optional()
        originalBool := true
        originalPtr := &originalBool

        result, err := schema.Parse(originalPtr)
        require.NoError(t, err)
        assert.True(t, result == originalPtr, "Pointer identity should be preserved")
    })
    
    t.Run("API compatibility patterns", func(t *testing.T) {
        // Test patterns that mimic Zod's API in other languages
        schema := CoercedBool() // z.coerce.boolean()
        result, err := schema.Parse("true")
        require.NoError(t, err)
        assert.True(t, result)
    })
}
```

---

## ‚úÖ Implementation Checklist

This checklist is simplified to match the new 7-section structure.

#### Basic Functionality
- [ ] Test valid inputs of the correct type.
- [ ] Test invalid inputs of other types (string, int, nil, etc.).
- [ ] Test `MustParse` panics on invalid input.
- [ ] Test custom error messages.

#### Type Safety
- [ ] Verify `Parse` return types with `assert.IsType`.
- [ ] Use compile-time `var _ *Zod...` assignments to verify schema types.
- [ ] Test type evolution (e.g., `T` -> `*T` after `.Optional()`).

#### Modifier Methods
- [ ] **Immutability**: For every modifier, confirm the original schema remains unchanged by creating a new variable for the modified schema.
- [ ] **`Optional`, `Nilable`, `Nullish`**:
    - [ ] Verify they accept `nil` input.
    - [ ] Confirm they convert a value schema `T` to a pointer schema `*T`.
- [ ] **`Default`, `Prefault`**:
    - [ ] Verify they provide fallback values correctly.
    - [ ] Confirm they preserve the schema's type (`T` remains `T`, `*T` remains `*T`).
    - [ ] Test both value (e.g., `Default`) and function (e.g., `DefaultFunc`) variants.
- [ ] **`Refine`, `Check`**:
    - [ ] Verify custom validation logic is executed for both passing and failing cases.
    - [ ] Test with custom error messages.
- [ ] **`Overwrite`**:
    - [ ] Verify it transforms the value as expected and preserves the type.
- [ ] **`Transform`, `Pipe`**:
    - [ ] `Transform`: Verify it changes the output value and type correctly.
    - [ ] `Pipe`: Verify the output of the first schema is correctly passed to the second.
- [ ] **`NonOptional`**:
    - [ ] Verify it correctly rejects `nil`.
    - [ ] Confirm it converts a pointer schema `*T` back to a value schema `T`.
- [ ] **`IsOptional`, `IsNilable`**:
    - [ ] Verify status is reported correctly across all schema variations (base, `.Optional()`, `.Nilable()`, `.Nullish()`, `.NonOptional()`).

#### Chaining
- [ ] Test chains of 2-3 modifiers.
- [ ] Verify the final type and behavior of the chain.

#### Coercion (Primitives only)
- [ ] Test valid coercible inputs (e.g., `"true"` for `CoercedBool`).
- [ ] Test invalid, non-coercible inputs.

#### Edge Cases
- [ ] Test `nil` input against all relevant schema variations (base, optional, nilable, etc.).
- [ ] For schemas returning pointers, verify that passing a pointer preserves its identity.

#### Type-Specific Methods (e.g., Enum, Slice)
- [ ] Test methods unique to the complex type (e.g., `Enum().Options()`, `Slice().Min()`).

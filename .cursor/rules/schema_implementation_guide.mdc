# GoZod Schema Implementation

A practical reference for building **new schema types** inside the GoZod code-base.  
It targets **Cursor AI** and human contributors alike: every rule here exists to keep
implementations consistent, type-safe and performant.

---

## 1  Core Principles

1. **Compile-time safety** – all APIs are generic; no `interface{}` assertions inside
   schema code.  
2. **Zero-overhead abstractions** – primitives allocate nothing, composites allocate
   lazily.  
3. **Unified architecture** – every file follows the same 8-section layout so Cursor
   can pattern-match and extend it.  
4. **Copy-on-Write modifiers** – modifiers clone internals; the original instance is
   immutable.  
5. **Mandatory helper packages** – *never* roll your own validation, parsing,
   coercion or error logic.

---

## 2  Type Classification Cheat-Sheet

| Scenario                          | Architecture                    | Generic pattern                         | Example |
|-----------------------------------|---------------------------------|-----------------------------------------|---------|
| Native Go value (string / int…)   | Single generic + constraint     | `ZodType[T Constraint]`  `Constraint: T \| *T` | `Bool`, `String`, `Float` |
| Requires value comparison (`==`)  | Comparable + dual generic       | `ZodType[T comparable, R any]`          | `Enum`, `Literal` |
| Composite / user struct / slice   | Dual generic                    | `ZodType[T any, R any]`                 | `Struct`, `Slice`, `Map` |

Decision flow  `▶`  Native? → Comparable? → Composite.

---

## 3  Mandatory 8-Section File Layout

Every schema file *must* keep sections in this exact order so automated tooling can
inject code safely:

1. **TYPE CONSTRAINTS**   – union constraints (`bool | *bool`, etc.)
2. **TYPE DEFINITIONS**   – `Def`, `Internals`, public type.
3. **CORE METHODS**       – `Parse`, `Coerce`, `MustParse`, `GetInternals`.
4. **MODIFIER METHODS**   – `Optional`, `Default`, `Overwrite`, …
5. **VALIDATION METHODS** – thin wrappers over `checks.*`.
6. **TRANSFORM & PIPE**   – WrapFn pattern, no converter structs.
7. **REFINEMENT METHODS** – `Refine`, `RefineAny`, custom `Check`.
8. **CONSTRUCTORS**       – `Type()`, `TypePtr()`, `TypeTyped[T]`.

> Keep the section banners – Cursor relies on them when autofilling code.

---

## 4  Helper Packages – **Use Them or Break the Build**

| Purpose      | Package                  | Must use |
|--------------|--------------------------|-----------|
| Validation   | `internal/checks`        | ✅ |
| Parsing      | `internal/engine`        | ✅ |
| Error build  | `internal/issues`        | ✅ |
| Type convert | `pkg/coerce`             | ✅ |
| Param utils  | `internal/utils`         | ✅ |

### Example – adding a min-length check
```go
func (z *ZodString[T]) Min(n int, p ...any) *ZodString[T] {
    chk := checks.MinLength(n, p...)
    ni  := z.internals.ZodTypeInternals.Clone()
    ni.AddCheck(chk)
    return z.withInternals(ni)
}
```
No custom check structs, no manual error creation.

---

## 5  Engine Integration Patterns

### 5.1  Primitives
```go
return engine.ParsePrimitive[base, constraint](
    input,
    &z.internals.ZodTypeInternals,
    core.ZodTypeXYZ,          // type code
    engine.ApplyChecks[base], // validator
    engine.ConvertToConstraintType[base, constraint],
    ctx...,
)
```

*   **`base`** – concrete Go type stored internally (`bool`, `string`, `int64`…).
*   **`constraint`** – user-visible generic type (`T` or `*T`).

### 5.2  Composites
```go
return engine.ParseType[R](
    input,
    &z.internals.ZodTypeInternals,
    core.ZodTypeObject, // or Slice / Map …
    extractFn,          // unwrap raw value
    validateFn,         // run checks + nested schemas
    ctx...,
)
```
Provide *fast paths* in `extractFn` before falling back to reflection.

---

## 6  Copy-on-Write Modifier Rules

1. Modifiers **never** mutate `z.internals` – always `Clone()` first.
2. Pointer-returning modifiers (`Optional`, `Nilable`, `Nullish`) switch **only**
   the **constraint** type, not the base type.
3. `Default`, `Prefault`, `Transform` keep the original generic `T`.
4. `withInternals` / `withPtrInternals` must preserve `Def` to share immutable
   data.

---

## 7  Primitive Type – Full Template

Below is a condensed but complete pattern; replicate it for any new primitive.

```go
// SECTION 1 – TYPE CONSTRAINTS
// Supports bool and *bool
type BoolConstraint interface { bool | *bool }

// SECTION 2 – TYPE DEFINITIONS

type ZodBoolDef struct{ core.ZodTypeDef }

type ZodBoolInternals struct{
    core.ZodTypeInternals
    Def *ZodBoolDef
}

type ZodBool[T BoolConstraint] struct{ internals *ZodBoolInternals }

// SECTION 3 – CORE METHODS

func (z *ZodBool[T]) Parse(in any, ctx ...*core.ParseContext)(T,error){
    return engine.ParsePrimitive[bool,T](
        in, &z.internals.ZodTypeInternals,
        core.ZodTypeBool,
        engine.ApplyChecks[bool],
        engine.ConvertToConstraintType[bool,T],
        ctx...,
    )
}

func (z *ZodBool[T]) Coerce(in any)(any,bool){
    v,err := coerce.ToBool(in)
    return v, err==nil
}

// SECTION 4 – MODIFIERS
func (z *ZodBool[T]) Optional() *ZodBool[*bool]{
    ni := z.internals.Clone(); ni.SetOptional(true)
    return z.withPtrInternals(ni)
}

// SECTION 6 – TRANSFORM
func (z *ZodBool[T]) Transform(fn func(bool,*core.RefinementContext)(any,error)) *core.ZodTransform[T,any]{
    wrap := func(v T, c *core.RefinementContext)(any,error){ return fn(extractBool(v),c) }
    return core.NewZodTransform(z, wrap)
}
```

> **Cursor tip**: Keep each section comment intact; Cursor can append new methods
> into the right area without misplacing code.

---

## 8  Composite Type Sketch – Slice

```go
// Constraints optional – slices accept any element type

type ZodSliceDef[T any] struct{
    core.ZodTypeDef
    Element core.ZodType[any]
}

type ZodSliceInternals[T any] struct{
    core.ZodTypeInternals
    Def     *ZodSliceDef[T]
    Element core.ZodType[any]
}

type ZodSlice[T any,R any] struct{ internals *ZodSliceInternals[T] }

// Parse logic delegates element validation to Element schema
func (z *ZodSlice[T,R]) Parse(in any, ctx ...*core.ParseContext)(R,error){
    return engine.ParseType[R](
        in, &z.internals.ZodTypeInternals, core.ZodTypeSlice,
        extractSlice[T], validateSlice[T], ctx...,
    )
}
```

### Element Validation Helpers
* `extractSlice`: fast path for `[]T` and `[]*T`.
* `validateSlice`: length checks + per-item `Element.Parse`.

---

## 9  Transform ‑vs- Overwrite ‑vs- Pipe

| Method    | Type change | Stored as    | Best for |
|-----------|-------------|--------------|----------|
| Transform | ✔           | `ZodTransform` | Return a *different* type after validation |
| Overwrite | ✖           | `checks.Overwrite` | Mutate value but keep schema type |
| Pipe      | Depends     | `ZodPipe`      | Chain validation to another schema |

Implementation pattern (no converter struct):
```go
// Transform example
return core.NewZodTransform(z, func(in T,c *core.RefinementContext)(any,error){
    return fn(extract(in),c)
})
```

---

## 10  Validation Method Rules

* Always obtain checks via `checks.*` (Min, Regex, Custom…).
* For custom logic wrap the user callback inside `checks.NewCustom` so engine can
  aggregate issues.

```go
check := checks.NewCustom[any](wrapper, params...)
ni    := z.internals.Clone(); ni.AddCheck(check)
return z.withInternals(ni)
```

---

## 11  Error Handling

The only way to surface an error is through `internal/issues` – this keeps payload
formatting consistent across all types.

```go
return issues.NewZodError(issues.ConvertRawIssuesToIssues(raw, ctx))
```

No direct `fmt.Errorf` inside parsing/validation code.

---

## 12  Testing Checklist

1. **Parse success** – valid input returns typed value.
2. **Modifier chain** – `Optional().Default()` works and original schema untouched.
3. **Error branches** – invalid input produces an error with correct path/type.
4. **Pointer identity** – pointer constraints preserve identity when possible.
5. **Race + bench** – `go test -race`, `go test -bench=.`.

---

## 13  Common Pitfalls

* Mis-ordering the 8 sections – Cursor inserts code in wrong spot.  
* `Default(v R)` instead of `Default(v T)` – breaks API consistency.  
* Direct reflection / `.(type)` – violates principle #1.  
* Forgetting `ni := internals.Clone()` – leads to shared-state bugs.  
* Adding validation without `checks` – linter will fail.

---

## 14  Implementation → PR Checklist

- [ ] File respects section order & headings.  
- [ ] All helper packages imported.  
- [ ] `Parse` delegates to engine helpers.  
- [ ] Modifiers follow CoW + pointer rules.  
- [ ] Unit tests added.  
- [ ] Public constructors exported in `gozod.go`.  
- [ ] Docs updated if public API changes.

---

Follow this playbook and new GoZod schemas will automatically inherit the library's
performance, safety and DX guarantees.
